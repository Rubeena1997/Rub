Yesterday we discussed about basic sdlc and agile methods
after that we did github 

Today i will take CD part which will include Docker 
and CI part for automatic integration which will done by jenkins

Pr
Preety Singh
10:03 AM
import java.util.*;
public class StackDemo {
public static void main(String[] args) {
Stack<Double> s = new Stack<Double>();
s.push(10.2);
s.push(50.2);
s.push(30.2);
s.push(40.2);
s.push(70.2);
s.push(9.3);
System.out.println(s);
// System.out.println(s.pop());
// System.out.println(s);
System.out.println(s.peek());
System.out.println(s);
}
}



package org.data.structure;

import java.util.Stack;

class Sports
{
String name;
Sports (String na)
{
name = na;
}

String getData ()
{
return "Name : " + name;
}
}

class StackDemo
{
public static void main (String[]args)
{
Stack < Sports > stack = new Stack < Sports > ();
Sports s1 = new Sports ("Cricket");
Sports s2 = new Sports ("Football");
Sports s3 = new Sports ("Basketball");
Sports s4 = new Sports ("Table Tennis");
Sports s5 = new Sports ("Badminton");


stack.push (s1);
stack.push (s2);
stack.push (s3);
stack.push (s4);
stack.push (s5);
System.out.println ("Stack size is " + stack.size ());

stack.pop ();
stack.pop ();
stack.pop ();
stack.pop ();
stack.pop ();


// Returns the number of elements present in the stack
System.out.println ("Stack size is " + stack.size ());

// check if stack is empty
if (stack.empty ())
System.out.println ("Stack is Empty");
else
System.out.println ("Stack is not Empty");
}
}

package org.data.structure;

import java.util.*;
class LinkedListDemo
{
public static void main (String[]args)
{
LinkedList < String > animals = new LinkedList <> ();

// Add elements to LinkedList
animals.add ("Dog");
animals.add ("Cat");
animals.add ("Horse");
System.out.println ("LinkedList: " + animals);

// Get the element from the linked list
String str = animals.get (1);
System.out.print ("Element at index 1: " + str);
System.out.println (" ");

//Iterator method
Iterator < String > itr = animals.iterator ();
while (itr.hasNext ())
{
System.out.println (itr.next ());
}
}
}



dequeue
package org.data.structure;

import java.util.Arrays;

class Emp
{
// global variables
int front, rear, size;
int capacity;
int array[];
public Emp(int capacity) {
this.capacity = capacity;
front = this.size = 0;
rear = capacity - 1;
array = new int[this.capacity];
}
boolean isFull(Emp queue)
{
return (queue.size == queue.capacity);
}
boolean isEmpty(Emp queue)
{
return (queue.size == 0);
}
void endqueue(int item)
{
if (isFull(this))
return;
this.rear = (this.rear + 1)
% this.capacity;
this.array[this.rear] = item;
this.size = this.size + 1;
}
int dequeue()
{
if (isEmpty(this))
return Integer.MIN_VALUE;

int item = this.array[this.front];
this.front = (this.front + 1)
% this.capacity;
this.size = this.size - 1;
return item;
}
int front()
{
if (isEmpty(this))
return Integer.MIN_VALUE;

return this.array[this.front];
}
int rear()
{
if (isEmpty(this))
return Integer.MIN_VALUE;

return this.array[this.rear];
}
@Override
public String toString() {
return "Emp [front=" + front + ", rear=" + rear + ", size=" + size + ", capacity=" + capacity + ", array="
+ Arrays.toString(array) + "]";
}

}
public class QueueExample {
public static void main(String[] args) {
Emp q = new Emp(40);
q.endqueue(20);
q.endqueue(30);
q.endqueue(29);
q.endqueue(34);
q.endqueue(23);
System.out.println(q);
System.out.println("Front item is "
+ q.front());

System.out.println(q.dequeue()
+ " dequeued from queue\n");

System.out.println("Front item is "
+ q.front());


System.out.println("Front item is "
+ q.rear());



}
}
